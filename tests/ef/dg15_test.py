import pytest
from pymrtd import ef
from pymrtd.ef.dg import *


@pytest.mark.depends(on=[
    'tests/ef/ef_base_test.py::test_ef_base_parse',
    'tests/ef/dg_base_test.py::test_dg_base',
])
def test_dg15():
    assert issubclass(ef.DG15, ef.DataGroup)

    # Test vector taken from German BSI TR-03105-5 ReferenceDataSet
    # https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/TechnischeRichtlinien/TR03105/BSI_TR-03105-5_ReferenceDataSet_zip.html
    # Datagroup14.bin
    tv_dg15 = bytes.fromhex('6F81A230819F300D06092A864886F70D010101050003818D00308189028181008130E120BB785A45D8D87E6F1A89EF4C6B655A555F58887DC6F78C293E71B028621B464C7B3123DF8896449ACB2A6E0219B7A43141BA617AE0E94CB5372EB6D964A1DBF2A43BD0CE659E962AC2CE9CEDF681CA1E3C74EA23C62D9ABFB81371D2602E39162EB578F9DED459C758EFD6A27A755B8C0E0E31E040D4D37A276939090203010001')
    dg15    = ef.DG15.load(tv_dg15)
    assert dg15.dump()                    == tv_dg15
    assert dg15.aaPublicKeyInfo.algorithm == 'rsa'
    assert dg15.aaPublicKeyInfo.bit_size  == 1024
    assert dg15.aaPublicKeyInfo.native['public_key']['modulus'] == int('008130E120BB785A45D8D87E6F1A89EF4C6B655A555F58887DC6F78C293E71B028621B464C7B3123DF8896449ACB2A6E0219B7A43141BA617AE0E94CB5372EB6D964A1DBF2A43BD0CE659E962AC2CE9CEDF681CA1E3C74EA23C62D9ABFB81371D2602E39162EB578F9DED459C758EFD6A27A755B8C0E0E31E040D4D37A27693909', 16)
    assert dg15.aaPublicKeyInfo.native['public_key']['public_exponent'] == 65537
    assert dg15.aaPublicKey.isRsaKey()        == True
    assert dg15.aaPublicKey._pub_key.key_size == 1024
    assert dg15.aaPublicKey.dump()            == bytes.fromhex('30819F300D06092A864886F70D010101050003818D00308189028181008130E120BB785A45D8D87E6F1A89EF4C6B655A555F58887DC6F78C293E71B028621B464C7B3123DF8896449ACB2A6E0219B7A43141BA617AE0E94CB5372EB6D964A1DBF2A43BD0CE659E962AC2CE9CEDF681CA1E3C74EA23C62D9ABFB81371D2602E39162EB578F9DED459C758EFD6A27A755B8C0E0E31E040D4D37A276939090203010001')

    # Test vector taken from https://www.etsi.org/
    # https://www.etsi.org/deliver/etsi_tr/103200_103299/103200/01.01.01_60/tr_103200v010101p.pdf
    # https://docbox.etsi.org/MTS/MTS/05-CONTRIBUTIONS/2011/MTS(11)0044_DMIMTS-00127_ePassport_Prototype_Platform.zip
    # ePassport_Data/CFG/DFLT/EACAA/EF_DG15.bin
    tv_dg15 = bytes.fromhex('6F81A230819F300D06092A864886F70D010101050003818D003081890281810095BDA8143635678427038D225E6F398B327F8AF02647B65C36E9FA8F4E7F8156364A231326F1EC1B9641B78822EC3014656D375C5F60641717F40F40B699DE3CCCB054550DD6DF2640022B9352701F2AB757E9A20FA605D309B6DDD7201F23CFDACC9EE299F187E9E71B650483DC4F6BC109F8FE8A2C2854C784057EE0E6F7670203010001')
    dg15    = ef.DG15.load(tv_dg15)
    assert dg15.dump()                    == tv_dg15
    assert dg15.aaPublicKeyInfo.algorithm == 'rsa'
    assert dg15.aaPublicKeyInfo.bit_size  == 1024
    assert dg15.aaPublicKeyInfo.native['public_key']['modulus'] == int('0095BDA8143635678427038D225E6F398B327F8AF02647B65C36E9FA8F4E7F8156364A231326F1EC1B9641B78822EC3014656D375C5F60641717F40F40B699DE3CCCB054550DD6DF2640022B9352701F2AB757E9A20FA605D309B6DDD7201F23CFDACC9EE299F187E9E71B650483DC4F6BC109F8FE8A2C2854C784057EE0E6F767', 16)
    assert dg15.aaPublicKeyInfo.native['public_key']['public_exponent'] == 65537
    assert dg15.aaPublicKey.isRsaKey()        == True
    assert dg15.aaPublicKey._pub_key.key_size == 1024
    assert dg15.aaPublicKey.dump()            == bytes.fromhex('30819F300D06092A864886F70D010101050003818D003081890281810095BDA8143635678427038D225E6F398B327F8AF02647B65C36E9FA8F4E7F8156364A231326F1EC1B9641B78822EC3014656D375C5F60641717F40F40B699DE3CCCB054550DD6DF2640022B9352701F2AB757E9A20FA605D309B6DDD7201F23CFDACC9EE299F187E9E71B650483DC4F6BC109F8FE8A2C2854C784057EE0E6F7670203010001')

    # Fuzz tests
    with pytest.raises(ValueError, match="Invalid elementary file tag, expected tag '15' got '16'"):
        # Test vector taken from https://www.etsi.org/
        # https://www.etsi.org/deliver/etsi_tr/103200_103299/103200/01.01.01_60/tr_103200v010101p.pdf
        # https://docbox.etsi.org/MTS/MTS/05-CONTRIBUTIONS/2011/MTS(11)0044_DMIMTS-00127_ePassport_Prototype_Platform.zip
        # ePassport_Data/CFG/EAC/LDS/I01/EF_DG15.bin
        tv_dg15 = bytes.fromhex('7081A230819F300D06092A864886F70D010101050003818D003081890281810095BDA8143635678427038D225E6F398B327F8AF02647B65C36E9FA8F4E7F8156364A231326F1EC1B9641B78822EC3014656D375C5F60641717F40F40B699DE3CCCB054550DD6DF2640022B9352701F2AB757E9A20FA605D309B6DDD7201F23CFDACC9EE299F187E9E71B650483DC4F6BC109F8FE8A2C2854C784057EE0E6F7670203010001')
        dg15    = ef.DG15.load(tv_dg15)
