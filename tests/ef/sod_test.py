
import os
import py
import pytest

from asn1crypto.cms import IssuerAndSerialNumber
from pymrtd import ef
from pymrtd.ef.dg import DataGroupNumber
from pymrtd.pki.x509 import DocumentSignerCertificate

_dir = os.path.dirname(os.path.realpath(__file__))
CERTS_DIR = py.path.local(_dir) /'..'/'pki'/'certs'

@pytest.mark.depends(on=[
    'tests/ef/ef_base_test.py::test_ef_base',
    'tests/ef/dg_base_test.py::test_dg_base',
    'tests/ef/dg1_test.py::test_dg1',
    #'tests/ef/dg1_test.py::test_dg14',
    #'tests/ef/dg1_test.py::test_dg15'
])
@pytest.mark.datafiles(
    CERTS_DIR / 'dsc_de_0142fd5cf927.cer',
    CERTS_DIR / 'dsc_de_0130846f2b3e.cer'
)
def test_sod(datafiles):
    assert issubclass(ef.SOD, ef.ElementaryFile)

    # Test vector taken from German BSI TR-03105-5 ReferenceDataSet
    # https://www.bsi.bund.de/SharedDocs/Downloads/DE/BSI/Publikationen/TechnischeRichtlinien/TR03105/BSI_TR-03105-5_ReferenceDataSet_zip.html
    # EF_SOD.bin
    tv_sod = bytes.fromhex
    sod = ef.SOD.load(tv_sod)
    assert sod.dump()                                                          == tv_sod
    assert len(sod.content.children)                                           == 2
    assert sod.content.native['content_type']                                  == 'signed_data'
    assert sod.content.native['content']['version']                            == 'v3'
    assert len(sod.content.native['content']['digest_algorithms'])             == 1
    assert sod.content.native['content']['digest_algorithms'][0]['algorithm']  == 'sha256'
    assert sod.content.native['content']['encap_content_info']['content_type'] == 'ldsSecurityObject'

    # LDS SecurityObject test
    assert sod.ldsSecurityObject.version.native                            == 'v0'
    assert sod.ldsSecurityObject.ldsVersion.native                         == None
    assert sod.ldsSecurityObject.dgHashAlgo['algorithm'].native            == 'sha256'
    assert sod.ldsSecurityObject.dgHashAlgo['parameters'].native           == None

    assert len(sod.ldsSecurityObject.dgHashes)                             == 5
    assert sod.ldsSecurityObject.dgHashes.native[0]['dataGroupNumber']     == 'EF.DG1'
    assert sod.ldsSecurityObject.dgHashes.children[0].number               == DataGroupNumber(1)
    assert sod.ldsSecurityObject.dgHashes.native[0]['dataGroupHashValue']  == bytes.fromhex('4170CA879FCE6A22FFEF1567FF88079F415C66EAD250AB5F23781AC2CDBF42B6')
    assert sod.ldsSecurityObject.dgHashes.children[0].hash                 == bytes.fromhex('4170CA879FCE6A22FFEF1567FF88079F415C66EAD250AB5F23781AC2CDBF42B6')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(1))     == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(1)).number  == DataGroupNumber(1)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(1)).hash    == bytes.fromhex('4170CA879FCE6A22FFEF1567FF88079F415C66EAD250AB5F23781AC2CDBF42B6')
    assert sod.ldsSecurityObject.find(DataGroupNumber(1)).number           == DataGroupNumber(1)
    assert sod.ldsSecurityObject.find(DataGroupNumber(1)).hash             == bytes.fromhex('4170CA879FCE6A22FFEF1567FF88079F415C66EAD250AB5F23781AC2CDBF42B6')

    assert sod.ldsSecurityObject.dgHashes.native[1]['dataGroupNumber']     == 'EF.DG2'
    assert sod.ldsSecurityObject.dgHashes.children[1].number               == DataGroupNumber(2)
    assert sod.ldsSecurityObject.dgHashes.native[1]['dataGroupHashValue']  == bytes.fromhex('A9A1B09DFD598087AB3FCE4AE2EC65B1A1525BD258BFC27DF4419F8A65E54745')
    assert sod.ldsSecurityObject.dgHashes.children[1].hash                 == bytes.fromhex('A9A1B09DFD598087AB3FCE4AE2EC65B1A1525BD258BFC27DF4419F8A65E54745')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(2))     == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(2)).number  == DataGroupNumber(2)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(2)).hash    == bytes.fromhex('A9A1B09DFD598087AB3FCE4AE2EC65B1A1525BD258BFC27DF4419F8A65E54745')
    assert sod.ldsSecurityObject.find(DataGroupNumber(2)).number           == DataGroupNumber(2)
    assert sod.ldsSecurityObject.find(DataGroupNumber(2)).hash             == bytes.fromhex('A9A1B09DFD598087AB3FCE4AE2EC65B1A1525BD258BFC27DF4419F8A65E54745')

    assert sod.ldsSecurityObject.dgHashes.native[2]['dataGroupNumber']     == 'EF.DG3'
    assert sod.ldsSecurityObject.dgHashes.children[2].number               == DataGroupNumber(3)
    assert sod.ldsSecurityObject.dgHashes.native[2]['dataGroupHashValue']  == bytes.fromhex('403E4D17C26EBC832411898161D8FD5D99C58EE865CB3759B529AA782C7EDE00')
    assert sod.ldsSecurityObject.dgHashes.children[2].hash                 == bytes.fromhex('403E4D17C26EBC832411898161D8FD5D99C58EE865CB3759B529AA782C7EDE00')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(3))     == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(3)).number  == DataGroupNumber(3)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(3)).hash    == bytes.fromhex('403E4D17C26EBC832411898161D8FD5D99C58EE865CB3759B529AA782C7EDE00')
    assert sod.ldsSecurityObject.find(DataGroupNumber(3)).number           == DataGroupNumber(3)
    assert sod.ldsSecurityObject.find(DataGroupNumber(3)).hash            == bytes.fromhex('403E4D17C26EBC832411898161D8FD5D99C58EE865CB3759B529AA782C7EDE00')

    assert sod.ldsSecurityObject.dgHashes.native[3]['dataGroupNumber']     == 'EF.DG14'
    assert sod.ldsSecurityObject.dgHashes.children[3].number               == DataGroupNumber(14)
    assert sod.ldsSecurityObject.dgHashes.native[3]['dataGroupHashValue']  == bytes.fromhex('CF5004FFCCD64E1A8BD3A42FD53814EC3D4481640BE1906D0ECFEB016EF6A6AE')
    assert sod.ldsSecurityObject.dgHashes.children[3].hash                 == bytes.fromhex('CF5004FFCCD64E1A8BD3A42FD53814EC3D4481640BE1906D0ECFEB016EF6A6AE')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(14))    == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(14)).number == DataGroupNumber(14)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(14)).hash   == bytes.fromhex('CF5004FFCCD64E1A8BD3A42FD53814EC3D4481640BE1906D0ECFEB016EF6A6AE')
    assert sod.ldsSecurityObject.find(DataGroupNumber(14)).number          == DataGroupNumber(14)
    assert sod.ldsSecurityObject.find(DataGroupNumber(14)).hash            == bytes.fromhex('CF5004FFCCD64E1A8BD3A42FD53814EC3D4481640BE1906D0ECFEB016EF6A6AE')

    assert sod.ldsSecurityObject.dgHashes.native[4]['dataGroupNumber']     == 'EF.DG4'
    assert sod.ldsSecurityObject.dgHashes.children[4].number               == DataGroupNumber(4)
    assert sod.ldsSecurityObject.dgHashes.native[4]['dataGroupHashValue']  == bytes.fromhex('4C7A0F0DDAA473123834F1B0713ED9453D1D1D58BCE447FB1736D40A0761C17B')
    assert sod.ldsSecurityObject.dgHashes.children[4].hash                 == bytes.fromhex('4C7A0F0DDAA473123834F1B0713ED9453D1D1D58BCE447FB1736D40A0761C17B')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(4))     == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(4)).number  == DataGroupNumber(4)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(4)).hash    == bytes.fromhex('4C7A0F0DDAA473123834F1B0713ED9453D1D1D58BCE447FB1736D40A0761C17B')
    assert sod.ldsSecurityObject.find(DataGroupNumber(4)).number           == DataGroupNumber(4)
    assert sod.ldsSecurityObject.find(DataGroupNumber(4)).hash             == bytes.fromhex('4C7A0F0DDAA473123834F1B0713ED9453D1D1D58BCE447FB1736D40A0761C17B')

    hasher = sod.ldsSecurityObject.getDgHasher()
    assert hasher.algorithm.name == 'sha256'
    tv_dg1 = ef.DG1.load(bytes.fromhex('615B5F1F58503C443C3C4D55535445524D414E4E3C3C4552494B413C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C433131543030324A4D34443C3C3936303831323246323331303331343C3C3C3C3C3C3C3C3C3C3C3C3C3C3C34'))
    hasher.update(tv_dg1.dump())
    assert sod.ldsSecurityObject.find(DataGroupNumber(1)).hash == hasher.finalize()
    assert sod.ldsSecurityObject.contains(tv_dg1)              == True

    hasher = sod.ldsSecurityObject.getDgHasher()
    assert hasher.algorithm.name == 'sha256'
    tv_dg14 = ef.DG14.load(bytes.fromhex
    hasher.update(tv_dg14.dump())
    assert sod.ldsSecurityObject.find(DataGroupNumber(14)).hash == hasher.finalize()
    assert sod.ldsSecurityObject.contains(tv_dg14)              == True

    tv_dg15 = ef.DG15.load(bytes.fromhex('6F81A230819F300D06092A864886F70D010101050003818D00308189028181008130E120BB785A45D8D87E6F1A89EF4C6B655A555F58887DC6F78C293E71B028621B464C7B3123DF8896449ACB2A6E0219B7A43141BA617AE0E94CB5372EB6D964A1DBF2A43BD0CE659E962AC2CE9CEDF681CA1E3C74EA23C62D9ABFB81371D2602E39162EB578F9DED459C758EFD6A27A755B8C0E0E31E040D4D37A276939090203010001'))
    assert sod.ldsSecurityObject.contains(tv_dg15)              == False

    # DSC certificate check
    assert len(sod.dsCertificates) == 1
    with open(datafiles / 'dsc_de_0142fd5cf927.cer', "rb") as dsc:
        dsc = DocumentSignerCertificate.load(dsc.read())
        assert sod.dsCertificates[0].dump() == dsc.dump()

    # Verify signers info
    assert len(sod.content.native['content']['signer_infos'])                    == 1
    assert sod.content.native['content']['signer_infos'][0]['version']           == 'v1'
    assert sod.content.native['content']['signer_infos'][0]['digest_algorithm']  == { 'algorithm' :'sha256', 'parameters': None }
    assert sod.content.native['content']['signer_infos'][0]['digest_algorithm']  == sod.content.native['content']['digest_algorithms'][0]
    assert len(sod.content.native['content']['signer_infos'][0]['signed_attrs']) == 2
    assert sod.content.native['content']['signer_infos'][0]['signed_attrs'][0]   == { 'type' : 'content_type', 'values' : ['ldsSecurityObject'] }
    assert sod.content.native['content']['signer_infos'][0]['signed_attrs'][1]   == {
        'type' : 'message_digest',
        'values' : [bytes.fromhex('B46A0D05E280F398EFEEEBFF67E78C736ADD15E75670B1AD4C6C534E8187B9D6')]
    }

    assert len(sod.content.native['content']['signer_infos'][0]['signature_algorithm']) == 2
    assert sod.content.native['content']['signer_infos'][0]['signature_algorithm']      == {
        'algorithm' : 'rsassa_pss',
        'parameters' : {
            'hash_algorithm' : { 'algorithm' :'sha256', 'parameters': None },
            'mask_gen_algorithm' : {
                'algorithm' : 'mgf1',
                'parameters' : { 'algorithm' :'sha256', 'parameters': None }
            },
            'salt_length' : 32,
            'trailer_field' : 'trailer_field_bc'
        }
    }

    assert sod.content.native['content']['signer_infos'][0]['signature'] == bytes.fromhex('761106E9FBD2ED1B2F75027DAF13975A4C7ADFC54D675D2DD2BBA762BC073D9288AF4B1B87BA7987D53FA1D321D1943F58573F4913424E2BCDD080C2D8927A985BE2BDCAF6B8FE21EC99D8227F052ED118B7EAE6029F57889CA723912076916355068EBBCF46F19C3FBB49DCF1E9F3B10DF11E270FAC11BC6D1E3C5ADF68E0E46381A45F737E91EE9F889DB6D418AA2C6C3213C47FBC2787F0134384B343CC921A9A03878EBA79BA00901115495942C3E7B0E4DA09E0916C172228AD28D9DBEC915F32E58D7431480443030C2C3D1DEF840223FED41A92C5B30AA2CE9ED346CBB8BB172A2EFF73E0B8CFEC89071A07DC62627421F808DA541A58A1A572E7583F')
    assert sod.content.native['content']['signer_infos'][0]['unsigned_attrs'] == None

    # Check signers
    assert len(sod.signers) == 1
    assert type(sod.signers[0].chosen) == IssuerAndSerialNumber
    assert sod.signers[0].native['issuer'] == {
        'country_name' : 'DE',
        'organization_name' : 'HJP Consulting',
        'organizational_unit_name' : 'Country Signer',
        'common_name' : 'HJP PB CS'
    }
    assert sod.signers[0].native['issuer']        == sod.dsCertificates[0].issuer.native
    assert sod.signers[0].native['serial_number'] == 1387230198055
    assert sod.signers[0].native['serial_number'] == sod.dsCertificates[0].serial_number

    # Verify SOD signature
    sod.verify()


    # Test vector taken from https://www.etsi.org/
    # https://www.etsi.org/deliver/etsi_tr/103200_103299/103200/01.01.01_60/tr_103200v010101p.pdf
    # https://docbox.etsi.org/MTS/MTS/05-CONTRIBUTIONS/2011/MTS(11)0044_DMIMTS-00127_ePassport_Prototype_Platform.zip
    # ePassport_Data/CFG/DFLT/EACAA/EF_SOD.bin
    tv_sod = bytes.fromhex
    sod = ef.SOD.load(tv_sod)
    assert sod.dump()                                                          == tv_sod
    assert len(sod.content.children)                                           == 2
    assert sod.content.native['content_type']                                  == 'signed_data'
    assert sod.content.native['content']['version']                            == 'v3'
    assert len(sod.content.native['content']['digest_algorithms'])             == 1
    assert sod.content.native['content']['digest_algorithms'][0]['algorithm']  == 'sha256'
    assert sod.content.native['content']['encap_content_info']['content_type'] == 'ldsSecurityObject'

    # LDS SecurityObject test
    assert sod.ldsSecurityObject.version.native                            == 'v0'
    assert sod.ldsSecurityObject.ldsVersion.native                         == None
    assert sod.ldsSecurityObject.dgHashAlgo['algorithm'].native            == 'sha256'
    assert sod.ldsSecurityObject.dgHashAlgo['parameters'].native           == None

    assert len(sod.ldsSecurityObject.dgHashes)                             == 6
    assert sod.ldsSecurityObject.dgHashes.native[0]['dataGroupNumber']     == 'EF.DG1'
    assert sod.ldsSecurityObject.dgHashes.children[0].number               == DataGroupNumber(1)
    assert sod.ldsSecurityObject.dgHashes.native[0]['dataGroupHashValue']  == bytes.fromhex('51B6FC0EF1946F3A86D2A4C9557C5D8ECFF13113B4131089C5C48BF7291FFDF5')
    assert sod.ldsSecurityObject.dgHashes.children[0].hash                 == bytes.fromhex('51B6FC0EF1946F3A86D2A4C9557C5D8ECFF13113B4131089C5C48BF7291FFDF5')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(1))     == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(1)).number  == DataGroupNumber(1)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(1)).hash    == bytes.fromhex('51B6FC0EF1946F3A86D2A4C9557C5D8ECFF13113B4131089C5C48BF7291FFDF5')
    assert sod.ldsSecurityObject.find(DataGroupNumber(1)).number           == DataGroupNumber(1)
    assert sod.ldsSecurityObject.find(DataGroupNumber(1)).hash             == bytes.fromhex('51B6FC0EF1946F3A86D2A4C9557C5D8ECFF13113B4131089C5C48BF7291FFDF5')

    assert sod.ldsSecurityObject.dgHashes.native[1]['dataGroupNumber']     == 'EF.DG2'
    assert sod.ldsSecurityObject.dgHashes.children[1].number               == DataGroupNumber(2)
    assert sod.ldsSecurityObject.dgHashes.native[1]['dataGroupHashValue']  == bytes.fromhex('A9A1B09DFD598087AB3FCE4AE2EC65B1A1525BD258BFC27DF4419F8A65E54745')
    assert sod.ldsSecurityObject.dgHashes.children[1].hash                 == bytes.fromhex('A9A1B09DFD598087AB3FCE4AE2EC65B1A1525BD258BFC27DF4419F8A65E54745')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(2))     == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(2)).number  == DataGroupNumber(2)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(2)).hash    == bytes.fromhex('A9A1B09DFD598087AB3FCE4AE2EC65B1A1525BD258BFC27DF4419F8A65E54745')
    assert sod.ldsSecurityObject.find(DataGroupNumber(2)).number           == DataGroupNumber(2)
    assert sod.ldsSecurityObject.find(DataGroupNumber(2)).hash             == bytes.fromhex('A9A1B09DFD598087AB3FCE4AE2EC65B1A1525BD258BFC27DF4419F8A65E54745')

    assert sod.ldsSecurityObject.dgHashes.native[2]['dataGroupNumber']     == 'EF.DG3'
    assert sod.ldsSecurityObject.dgHashes.children[2].number               == DataGroupNumber(3)
    assert sod.ldsSecurityObject.dgHashes.native[2]['dataGroupHashValue']  == bytes.fromhex('403E4D17C26EBC832411898161D8FD5D99C58EE865CB3759B529AA782C7EDE00')
    assert sod.ldsSecurityObject.dgHashes.children[2].hash                 == bytes.fromhex('403E4D17C26EBC832411898161D8FD5D99C58EE865CB3759B529AA782C7EDE00')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(3))     == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(3)).number  == DataGroupNumber(3)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(3)).hash    == bytes.fromhex('403E4D17C26EBC832411898161D8FD5D99C58EE865CB3759B529AA782C7EDE00')
    assert sod.ldsSecurityObject.find(DataGroupNumber(3)).number           == DataGroupNumber(3)
    assert sod.ldsSecurityObject.find(DataGroupNumber(3)).hash            == bytes.fromhex('403E4D17C26EBC832411898161D8FD5D99C58EE865CB3759B529AA782C7EDE00')

    assert sod.ldsSecurityObject.dgHashes.native[3]['dataGroupNumber']     == 'EF.DG14'
    assert sod.ldsSecurityObject.dgHashes.children[3].number               == DataGroupNumber(14)
    assert sod.ldsSecurityObject.dgHashes.native[3]['dataGroupHashValue']  == bytes.fromhex('A1A7B2285B954DD053253C1D851709F6380731176CC9EB1123546439C704108A')
    assert sod.ldsSecurityObject.dgHashes.children[3].hash                 == bytes.fromhex('A1A7B2285B954DD053253C1D851709F6380731176CC9EB1123546439C704108A')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(14))    == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(14)).number == DataGroupNumber(14)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(14)).hash   == bytes.fromhex('A1A7B2285B954DD053253C1D851709F6380731176CC9EB1123546439C704108A')
    assert sod.ldsSecurityObject.find(DataGroupNumber(14)).number          == DataGroupNumber(14)
    assert sod.ldsSecurityObject.find(DataGroupNumber(14)).hash            == bytes.fromhex('A1A7B2285B954DD053253C1D851709F6380731176CC9EB1123546439C704108A')

    assert sod.ldsSecurityObject.dgHashes.native[4]['dataGroupNumber']     == 'EF.DG15'
    assert sod.ldsSecurityObject.dgHashes.children[4].number               == DataGroupNumber(15)
    assert sod.ldsSecurityObject.dgHashes.native[4]['dataGroupHashValue']  == bytes.fromhex('5265ECB286F406D93EC5B8965659D45450D8DA1A97575DEF4EFC7303C7408730')
    assert sod.ldsSecurityObject.dgHashes.children[4].hash                 == bytes.fromhex('5265ECB286F406D93EC5B8965659D45450D8DA1A97575DEF4EFC7303C7408730')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(14))    == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(15)).number == DataGroupNumber(15)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(15)).hash   == bytes.fromhex('5265ECB286F406D93EC5B8965659D45450D8DA1A97575DEF4EFC7303C7408730')
    assert sod.ldsSecurityObject.find(DataGroupNumber(15)).number          == DataGroupNumber(15)
    assert sod.ldsSecurityObject.find(DataGroupNumber(15)).hash            == bytes.fromhex('5265ECB286F406D93EC5B8965659D45450D8DA1A97575DEF4EFC7303C7408730')

    assert sod.ldsSecurityObject.dgHashes.native[5]['dataGroupNumber']     == 'EF.DG4'
    assert sod.ldsSecurityObject.dgHashes.children[5].number               == DataGroupNumber(4)
    assert sod.ldsSecurityObject.dgHashes.native[5]['dataGroupHashValue']  == bytes.fromhex('4C7A0F0DDAA473123834F1B0713ED9453D1D1D58BCE447FB1736D40A0761C17B')
    assert sod.ldsSecurityObject.dgHashes.children[5].hash                 == bytes.fromhex('4C7A0F0DDAA473123834F1B0713ED9453D1D1D58BCE447FB1736D40A0761C17B')
    assert sod.ldsSecurityObject.dgHashes.contains(DataGroupNumber(4))     == True
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(4)).number  == DataGroupNumber(4)
    assert sod.ldsSecurityObject.dgHashes.find(DataGroupNumber(4)).hash    == bytes.fromhex('4C7A0F0DDAA473123834F1B0713ED9453D1D1D58BCE447FB1736D40A0761C17B')
    assert sod.ldsSecurityObject.find(DataGroupNumber(4)).number           == DataGroupNumber(4)
    assert sod.ldsSecurityObject.find(DataGroupNumber(4)).hash             == bytes.fromhex('4C7A0F0DDAA473123834F1B0713ED9453D1D1D58BCE447FB1736D40A0761C17B')

    hasher = sod.ldsSecurityObject.getDgHasher()
    assert hasher.algorithm.name == 'sha256'
    tv_dg1 = ef.DG1.load(bytes.fromhex('615B5F1F58503C443C3C4D55535445524D414E4E3C3C4552494B413C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C433131543030324A4D34443C3C3936303831323246313331303331373C3C3C3C3C3C3C3C3C3C3C3C3C3C3C36'))
    hasher.update(tv_dg1.dump())
    assert sod.ldsSecurityObject.find(DataGroupNumber(1)).hash == hasher.finalize()
    assert sod.ldsSecurityObject.contains(tv_dg1)              == True

    hasher = sod.ldsSecurityObject.getDgHasher()
    assert hasher.algorithm.name == 'sha256'
    tv_dg14 = ef.DG14.load(bytes.fromhex
    hasher.update(tv_dg14.dump())
    assert sod.ldsSecurityObject.find(DataGroupNumber(14)).hash == hasher.finalize()
    assert sod.ldsSecurityObject.contains(tv_dg14)              == True

    hasher = sod.ldsSecurityObject.getDgHasher()
    assert hasher.algorithm.name == 'sha256'
    tv_dg15 = ef.DG15.load(bytes.fromhex('6F81A230819F300D06092A864886F70D010101050003818D003081890281810095BDA8143635678427038D225E6F398B327F8AF02647B65C36E9FA8F4E7F8156364A231326F1EC1B9641B78822EC3014656D375C5F60641717F40F40B699DE3CCCB054550DD6DF2640022B9352701F2AB757E9A20FA605D309B6DDD7201F23CFDACC9EE299F187E9E71B650483DC4F6BC109F8FE8A2C2854C784057EE0E6F7670203010001'))
    hasher.update(tv_dg15.dump())
    assert sod.ldsSecurityObject.find(DataGroupNumber(15)).hash == hasher.finalize()
    assert sod.ldsSecurityObject.contains(tv_dg15)              == True

    # DSC certificate check
    assert len(sod.dsCertificates) == 1
    with open(datafiles / 'dsc_de_0130846f2b3e.cer', "rb") as dsc:
        dsc = DocumentSignerCertificate.load(dsc.read())
        assert sod.dsCertificates[0].dump() == dsc.dump()

    # Verify signers info
    assert len(sod.content.native['content']['signer_infos'])                    == 1
    assert sod.content.native['content']['signer_infos'][0]['version']           == 'v1'
    assert sod.content.native['content']['signer_infos'][0]['digest_algorithm']  == { 'algorithm' :'sha256', 'parameters': None }
    assert sod.content.native['content']['signer_infos'][0]['digest_algorithm']  == sod.content.native['content']['digest_algorithms'][0]
    assert len(sod.content.native['content']['signer_infos'][0]['signed_attrs']) == 2
    assert sod.content.native['content']['signer_infos'][0]['signed_attrs'][0]   == { 'type' : 'content_type', 'values' : ['ldsSecurityObject'] }
    assert sod.content.native['content']['signer_infos'][0]['signed_attrs'][1]   == {
        'type' : 'message_digest',
        'values' : [bytes.fromhex('B07B3583840A50F05E0B0AC5C8310629314B377D2F843FC82110A3B072BE5227')]
    }

    assert len(sod.content.native['content']['signer_infos'][0]['signature_algorithm']) == 2
    assert sod.content.native['content']['signer_infos'][0]['signature_algorithm']      == {
        'algorithm' : 'rsassa_pss',
        'parameters' : {
            'hash_algorithm' : { 'algorithm' :'sha256', 'parameters': None },
            'mask_gen_algorithm' : {
                'algorithm' : 'mgf1',
                'parameters' : { 'algorithm' :'sha256', 'parameters': None }
            },
            'salt_length' : 32,
            'trailer_field' : 'trailer_field_bc'
        }
    }

    assert sod.content.native['content']['signer_infos'][0]['signature'] == bytes.fromhex('599622056634871C86D5161CCA6AF851F14148E0E7EB79B1186DD6BEDF5BD0343EDB6C49B664E9FB459E742CA83358CE83E6B225A0CBFA7C3E9C6AF6D5BC2F4040DD47BF24CACB06FBDD933EEFAD360542656E1F65E0010B8EAE4DA084FC7B78ECB0CED647580BD1E8E2F8660252721E6DC8BD83A8EBE27F780FDBCBEA49D24C6A8A596BA4F4673A04409F2C1EA1CBC6802C9748DD5B2DF042391BA87650447C7E3BAD05553ACDEB96972E3907F425571D767F82219E02BB8839E7FEC9CFE07DCB88B5831A511383DADF5C7C0CB1CE1BD6C2B8B02C2C20DB27402DD3B0CE171993C417D065DD9A0B278E641CF51BABBCCA1128A400ED4AB7C0FD531E4D1E475C')
    assert sod.content.native['content']['signer_infos'][0]['unsigned_attrs'] == None

    # Check signers
    assert len(sod.signers) == 1
    assert type(sod.signers[0].chosen) == IssuerAndSerialNumber
    assert sod.signers[0].native['issuer'] == {
        'country_name' : 'DE',
        'organization_name' : 'ETSI',
        'organizational_unit_name' : 'Country Signer',
        'common_name' : 'ETSI CS'
    }
    assert sod.signers[0].native['issuer']        == sod.dsCertificates[0].issuer.native
    assert sod.signers[0].native['serial_number'] == 1307891936062
    assert sod.signers[0].native['serial_number'] == sod.dsCertificates[0].serial_number

    # Verify SOD signature
    sod.verify()

@pytest.mark.depends(on=['test_sod'])
def test_fuzz_sod():
    with pytest.raises(ef.sod.SODError, match="Content digest doesn't match signed digest"):
        # Test vector taken from https://www.etsi.org/
        # https://www.etsi.org/deliver/etsi_tr/103200_103299/103200/01.01.01_60/tr_103200v010101p.pdf
        # https://docbox.etsi.org/MTS/MTS/05-CONTRIBUTIONS/2011/MTS(11)0044_DMIMTS-00127_ePassport_Prototype_Platform.zip
        # ePassport_Data/CFG/DFLT/EACAA/EF_SOD.bin
        #
        # Modified hash value of DG1 to ...F6
        tv_sod = bytes.fromhex
        sod = ef.SOD.load(tv_sod)
        tv_dg1 = ef.DG1.load(bytes.fromhex('615B5F1F58503C443C3C4D55535445524D414E4E3C3C4552494B413C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C433131543030324A4D34443C3C3936303831323246313331303331373C3C3C3C3C3C3C3C3C3C3C3C3C3C3C36'))
        assert sod.ldsSecurityObject.contains(tv_dg1) == False
        sod.verify()

        # Test vector taken from https://www.etsi.org/
        # https://www.etsi.org/deliver/etsi_tr/103200_103299/103200/01.01.01_60/tr_103200v010101p.pdf
        # https://docbox.etsi.org/MTS/MTS/05-CONTRIBUTIONS/2011/MTS(11)0044_DMIMTS-00127_ePassport_Prototype_Platform.zip
        # ePassport_Data/CFG/DFLT/EACAA/EF_SOD.bin
        #
        # Modified hash value of DG14 to ..F7...
        tv_sod = bytes.fromhex
        sod = ef.SOD.load(tv_sod)
        tv_dg1 = ef.DG14.load(bytes.fromhex
        assert sod.ldsSecurityObject.contains(tv_dg1) == False
        sod.verify()

        # Test vector taken from https://www.etsi.org/
        # https://www.etsi.org/deliver/etsi_tr/103200_103299/103200/01.01.01_60/tr_103200v010101p.pdf
        # https://docbox.etsi.org/MTS/MTS/05-CONTRIBUTIONS/2011/MTS(11)0044_DMIMTS-00127_ePassport_Prototype_Platform.zip
        # ePassport_Data/CFG/DFLT/EACAA/EF_SOD.bin
        #
        # Modified hash value of DG15 to 53...
        tv_sod = bytes.fromhex
        sod = ef.SOD.load(tv_sod)
        tv_dg1 = ef.DG15.load(bytes.fromhex('6F81A230819F300D06092A864886F70D010101050003818D003081890281810095BDA8143635678427038D225E6F398B327F8AF02647B65C36E9FA8F4E7F8156364A231326F1EC1B9641B78822EC3014656D375C5F60641717F40F40B699DE3CCCB054550DD6DF2640022B9352701F2AB757E9A20FA605D309B6DDD7201F23CFDACC9EE299F187E9E71B650483DC4F6BC109F8FE8A2C2854C784057EE0E6F7670203010001'))
        assert sod.ldsSecurityObject.contains(tv_dg1) == False
        sod.verify()
